
buzzer sing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005a70  08005a70  00006a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  0000715c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a90  08005a90  0000715c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a94  08005a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005a98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000001c  08005ab4  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000bc  08005b54  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000714  2000015c  08005bf4  0000715c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000870  08005bf4  00007870  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000715c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001646f  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000296b  00000000  00000000  0001d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  0001ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eaa  00000000  00000000  00021228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029529  00000000  00000000  000220d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001688b  00000000  00000000  0004b5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103336  00000000  00000000  00061e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001651bc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005098  00000000  00000000  00165200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0016a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000015c 	.word	0x2000015c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005a58 	.word	0x08005a58

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000160 	.word	0x20000160
 8000234:	08005a58 	.word	0x08005a58

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <playBuzzerTone>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void playBuzzerTone(uint16_t duration) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
    HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	4807      	ldr	r0, [pc, #28]	@ (8000554 <playBuzzerTone+0x2c>)
 8000536:	f003 fc59 	bl	8003dec <HAL_TIM_PWM_Start>

    HAL_Delay(duration);
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fadb 	bl	8001af8 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <playBuzzerTone+0x2c>)
 8000546:	f003 fd4b 	bl	8003fe0 <HAL_TIM_PWM_Stop>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200002b0 	.word	0x200002b0

08000558 <LED_RGB_Cycle>:

void LED_RGB_Cycle(TIM_HandleTypeDef *htim) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	@ 0x38
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	playBuzzerTone(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000564:	f7ff ffe0 	bl	8000528 <playBuzzerTone>

	for (int i = 0; i < 3; i++) {
 8000568:	2300      	movs	r3, #0
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
 800056c:	e00a      	b.n	8000584 <LED_RGB_Cycle+0x2c>
	  HAL_TIM_PWM_Start(&htim3, channels[i]);
 800056e:	4a8a      	ldr	r2, [pc, #552]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	4619      	mov	r1, r3
 8000578:	4888      	ldr	r0, [pc, #544]	@ (800079c <LED_RGB_Cycle+0x244>)
 800057a:	f003 fc37 	bl	8003dec <HAL_TIM_PWM_Start>
	for (int i = 0; i < 3; i++) {
 800057e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000580:	3301      	adds	r3, #1
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34
 8000584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000586:	2b02      	cmp	r3, #2
 8000588:	ddf1      	ble.n	800056e <LED_RGB_Cycle+0x16>
    }
	playBuzzerTone(100);
 800058a:	2064      	movs	r0, #100	@ 0x64
 800058c:	f7ff ffcc 	bl	8000528 <playBuzzerTone>

	const int RED = 0, GREEN = 1, BLUE = 2;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	2302      	movs	r3, #2
 800059a:	60fb      	str	r3, [r7, #12]

	// Full RGB effect
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 800059c:	2300      	movs	r3, #0
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
 80005a0:	e0b8      	b.n	8000714 <LED_RGB_Cycle+0x1bc>
		// Red to Yellow (Red + Green)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 80005a2:	4a7d      	ldr	r2, [pc, #500]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d104      	bne.n	80005b8 <LED_RGB_Cycle+0x60>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005b6:	e02f      	b.n	8000618 <LED_RGB_Cycle+0xc0>
 80005b8:	4a77      	ldr	r2, [pc, #476]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d104      	bne.n	80005ce <LED_RGB_Cycle+0x76>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80005cc:	e024      	b.n	8000618 <LED_RGB_Cycle+0xc0>
 80005ce:	4a72      	ldr	r2, [pc, #456]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d104      	bne.n	80005e4 <LED_RGB_Cycle+0x8c>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005e2:	e019      	b.n	8000618 <LED_RGB_Cycle+0xc0>
 80005e4:	4a6c      	ldr	r2, [pc, #432]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ec:	2b0c      	cmp	r3, #12
 80005ee:	d104      	bne.n	80005fa <LED_RGB_Cycle+0xa2>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	e00e      	b.n	8000618 <LED_RGB_Cycle+0xc0>
 80005fa:	4a67      	ldr	r2, [pc, #412]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	2b10      	cmp	r3, #16
 8000604:	d104      	bne.n	8000610 <LED_RGB_Cycle+0xb8>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060c:	6593      	str	r3, [r2, #88]	@ 0x58
 800060e:	e003      	b.n	8000618 <LED_RGB_Cycle+0xc0>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000616:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], dutyCycle);
 8000618:	4a5f      	ldr	r2, [pc, #380]	@ (8000798 <LED_RGB_Cycle+0x240>)
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <LED_RGB_Cycle+0xd6>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
 800062c:	e02f      	b.n	800068e <LED_RGB_Cycle+0x136>
 800062e:	4a5a      	ldr	r2, [pc, #360]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d104      	bne.n	8000644 <LED_RGB_Cycle+0xec>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000640:	6393      	str	r3, [r2, #56]	@ 0x38
 8000642:	e024      	b.n	800068e <LED_RGB_Cycle+0x136>
 8000644:	4a54      	ldr	r2, [pc, #336]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064c:	2b08      	cmp	r3, #8
 800064e:	d104      	bne.n	800065a <LED_RGB_Cycle+0x102>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000656:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000658:	e019      	b.n	800068e <LED_RGB_Cycle+0x136>
 800065a:	4a4f      	ldr	r2, [pc, #316]	@ (8000798 <LED_RGB_Cycle+0x240>)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000662:	2b0c      	cmp	r3, #12
 8000664:	d104      	bne.n	8000670 <LED_RGB_Cycle+0x118>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066c:	6413      	str	r3, [r2, #64]	@ 0x40
 800066e:	e00e      	b.n	800068e <LED_RGB_Cycle+0x136>
 8000670:	4a49      	ldr	r2, [pc, #292]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000678:	2b10      	cmp	r3, #16
 800067a:	d104      	bne.n	8000686 <LED_RGB_Cycle+0x12e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000682:	6593      	str	r3, [r2, #88]	@ 0x58
 8000684:	e003      	b.n	800068e <LED_RGB_Cycle+0x136>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800068c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 0);
 800068e:	4a42      	ldr	r2, [pc, #264]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d104      	bne.n	80006a4 <LED_RGB_Cycle+0x14c>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	e02f      	b.n	8000704 <LED_RGB_Cycle+0x1ac>
 80006a4:	4a3c      	ldr	r2, [pc, #240]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d104      	bne.n	80006ba <LED_RGB_Cycle+0x162>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	6393      	str	r3, [r2, #56]	@ 0x38
 80006b8:	e024      	b.n	8000704 <LED_RGB_Cycle+0x1ac>
 80006ba:	4a37      	ldr	r2, [pc, #220]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	2b08      	cmp	r3, #8
 80006c4:	d104      	bne.n	80006d0 <LED_RGB_Cycle+0x178>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006ce:	e019      	b.n	8000704 <LED_RGB_Cycle+0x1ac>
 80006d0:	4a31      	ldr	r2, [pc, #196]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	2b0c      	cmp	r3, #12
 80006da:	d104      	bne.n	80006e6 <LED_RGB_Cycle+0x18e>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	e00e      	b.n	8000704 <LED_RGB_Cycle+0x1ac>
 80006e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <LED_RGB_Cycle+0x240>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ee:	2b10      	cmp	r3, #16
 80006f0:	d104      	bne.n	80006fc <LED_RGB_Cycle+0x1a4>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006fa:	e003      	b.n	8000704 <LED_RGB_Cycle+0x1ac>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <LED_RGB_Cycle+0x248>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f9f5 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 800070e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000710:	3301      	adds	r3, #1
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
 8000714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000716:	2b64      	cmp	r3, #100	@ 0x64
 8000718:	f77f af43 	ble.w	80005a2 <LED_RGB_Cycle+0x4a>
	}
	playBuzzerTone(100);
 800071c:	2064      	movs	r0, #100	@ 0x64
 800071e:	f7ff ff03 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000722:	2364      	movs	r3, #100	@ 0x64
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000726:	e0bf      	b.n	80008a8 <LED_RGB_Cycle+0x350>
		// Yellow to Green
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <LED_RGB_Cycle+0x240>)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d104      	bne.n	800073e <LED_RGB_Cycle+0x1e6>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
 800073c:	e036      	b.n	80007ac <LED_RGB_Cycle+0x254>
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d104      	bne.n	8000754 <LED_RGB_Cycle+0x1fc>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000750:	6393      	str	r3, [r2, #56]	@ 0x38
 8000752:	e02b      	b.n	80007ac <LED_RGB_Cycle+0x254>
 8000754:	4a10      	ldr	r2, [pc, #64]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d104      	bne.n	800076a <LED_RGB_Cycle+0x212>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000766:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000768:	e020      	b.n	80007ac <LED_RGB_Cycle+0x254>
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <LED_RGB_Cycle+0x240>)
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000772:	2b0c      	cmp	r3, #12
 8000774:	d104      	bne.n	8000780 <LED_RGB_Cycle+0x228>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077c:	6413      	str	r3, [r2, #64]	@ 0x40
 800077e:	e015      	b.n	80007ac <LED_RGB_Cycle+0x254>
 8000780:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <LED_RGB_Cycle+0x240>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000788:	2b10      	cmp	r3, #16
 800078a:	d10b      	bne.n	80007a4 <LED_RGB_Cycle+0x24c>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000792:	6593      	str	r3, [r2, #88]	@ 0x58
 8000794:	e00a      	b.n	80007ac <LED_RGB_Cycle+0x254>
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004
 800079c:	20000264 	.word	0x20000264
 80007a0:	20000000 	.word	0x20000000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 100);
 80007ac:	4a8f      	ldr	r2, [pc, #572]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d104      	bne.n	80007c2 <LED_RGB_Cycle+0x26a>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2264      	movs	r2, #100	@ 0x64
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c0:	e02f      	b.n	8000822 <LED_RGB_Cycle+0x2ca>
 80007c2:	4a8a      	ldr	r2, [pc, #552]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d104      	bne.n	80007d8 <LED_RGB_Cycle+0x280>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	2364      	movs	r3, #100	@ 0x64
 80007d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80007d6:	e024      	b.n	8000822 <LED_RGB_Cycle+0x2ca>
 80007d8:	4a84      	ldr	r2, [pc, #528]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	d104      	bne.n	80007ee <LED_RGB_Cycle+0x296>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2364      	movs	r3, #100	@ 0x64
 80007ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007ec:	e019      	b.n	8000822 <LED_RGB_Cycle+0x2ca>
 80007ee:	4a7f      	ldr	r2, [pc, #508]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	2b0c      	cmp	r3, #12
 80007f8:	d104      	bne.n	8000804 <LED_RGB_Cycle+0x2ac>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	2364      	movs	r3, #100	@ 0x64
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	e00e      	b.n	8000822 <LED_RGB_Cycle+0x2ca>
 8000804:	4a79      	ldr	r2, [pc, #484]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080c:	2b10      	cmp	r3, #16
 800080e:	d104      	bne.n	800081a <LED_RGB_Cycle+0x2c2>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2364      	movs	r3, #100	@ 0x64
 8000816:	6593      	str	r3, [r2, #88]	@ 0x58
 8000818:	e003      	b.n	8000822 <LED_RGB_Cycle+0x2ca>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	2364      	movs	r3, #100	@ 0x64
 8000820:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 0);
 8000822:	4a72      	ldr	r2, [pc, #456]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <LED_RGB_Cycle+0x2e0>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	@ 0x34
 8000836:	e02f      	b.n	8000898 <LED_RGB_Cycle+0x340>
 8000838:	4a6c      	ldr	r2, [pc, #432]	@ (80009ec <LED_RGB_Cycle+0x494>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d104      	bne.n	800084e <LED_RGB_Cycle+0x2f6>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2300      	movs	r3, #0
 800084a:	6393      	str	r3, [r2, #56]	@ 0x38
 800084c:	e024      	b.n	8000898 <LED_RGB_Cycle+0x340>
 800084e:	4a67      	ldr	r2, [pc, #412]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	2b08      	cmp	r3, #8
 8000858:	d104      	bne.n	8000864 <LED_RGB_Cycle+0x30c>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000862:	e019      	b.n	8000898 <LED_RGB_Cycle+0x340>
 8000864:	4a61      	ldr	r2, [pc, #388]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	2b0c      	cmp	r3, #12
 800086e:	d104      	bne.n	800087a <LED_RGB_Cycle+0x322>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	e00e      	b.n	8000898 <LED_RGB_Cycle+0x340>
 800087a:	4a5c      	ldr	r2, [pc, #368]	@ (80009ec <LED_RGB_Cycle+0x494>)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d104      	bne.n	8000890 <LED_RGB_Cycle+0x338>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	6593      	str	r3, [r2, #88]	@ 0x58
 800088e:	e003      	b.n	8000898 <LED_RGB_Cycle+0x340>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000898:	4b55      	ldr	r3, [pc, #340]	@ (80009f0 <LED_RGB_Cycle+0x498>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f92b 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 80008a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a4:	3b01      	subs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f6bf af3c 	bge.w	8000728 <LED_RGB_Cycle+0x1d0>
	}
	playBuzzerTone(100);
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f7ff fe39 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ba:	e0bd      	b.n	8000a38 <LED_RGB_Cycle+0x4e0>
		// Green to Cyan (Green + Blue)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 0);
 80008bc:	4a4b      	ldr	r2, [pc, #300]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <LED_RGB_Cycle+0x37a>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d0:	e02f      	b.n	8000932 <LED_RGB_Cycle+0x3da>
 80008d2:	4a46      	ldr	r2, [pc, #280]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d104      	bne.n	80008e8 <LED_RGB_Cycle+0x390>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80008e6:	e024      	b.n	8000932 <LED_RGB_Cycle+0x3da>
 80008e8:	4a40      	ldr	r2, [pc, #256]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d104      	bne.n	80008fe <LED_RGB_Cycle+0x3a6>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008fc:	e019      	b.n	8000932 <LED_RGB_Cycle+0x3da>
 80008fe:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000906:	2b0c      	cmp	r3, #12
 8000908:	d104      	bne.n	8000914 <LED_RGB_Cycle+0x3bc>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	2300      	movs	r3, #0
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	e00e      	b.n	8000932 <LED_RGB_Cycle+0x3da>
 8000914:	4a35      	ldr	r2, [pc, #212]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	2b10      	cmp	r3, #16
 800091e:	d104      	bne.n	800092a <LED_RGB_Cycle+0x3d2>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	6593      	str	r3, [r2, #88]	@ 0x58
 8000928:	e003      	b.n	8000932 <LED_RGB_Cycle+0x3da>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 100);
 8000932:	4a2e      	ldr	r2, [pc, #184]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d104      	bne.n	8000948 <LED_RGB_Cycle+0x3f0>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2264      	movs	r2, #100	@ 0x64
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
 8000946:	e02f      	b.n	80009a8 <LED_RGB_Cycle+0x450>
 8000948:	4a28      	ldr	r2, [pc, #160]	@ (80009ec <LED_RGB_Cycle+0x494>)
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d104      	bne.n	800095e <LED_RGB_Cycle+0x406>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2364      	movs	r3, #100	@ 0x64
 800095a:	6393      	str	r3, [r2, #56]	@ 0x38
 800095c:	e024      	b.n	80009a8 <LED_RGB_Cycle+0x450>
 800095e:	4a23      	ldr	r2, [pc, #140]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	2b08      	cmp	r3, #8
 8000968:	d104      	bne.n	8000974 <LED_RGB_Cycle+0x41c>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000972:	e019      	b.n	80009a8 <LED_RGB_Cycle+0x450>
 8000974:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <LED_RGB_Cycle+0x494>)
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	2b0c      	cmp	r3, #12
 800097e:	d104      	bne.n	800098a <LED_RGB_Cycle+0x432>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	e00e      	b.n	80009a8 <LED_RGB_Cycle+0x450>
 800098a:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <LED_RGB_Cycle+0x494>)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d104      	bne.n	80009a0 <LED_RGB_Cycle+0x448>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	6593      	str	r3, [r2, #88]	@ 0x58
 800099e:	e003      	b.n	80009a8 <LED_RGB_Cycle+0x450>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2364      	movs	r3, #100	@ 0x64
 80009a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], dutyCycle);
 80009a8:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <LED_RGB_Cycle+0x466>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80009bc:	e034      	b.n	8000a28 <LED_RGB_Cycle+0x4d0>
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d104      	bne.n	80009d4 <LED_RGB_Cycle+0x47c>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80009d2:	e029      	b.n	8000a28 <LED_RGB_Cycle+0x4d0>
 80009d4:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <LED_RGB_Cycle+0x494>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d109      	bne.n	80009f4 <LED_RGB_Cycle+0x49c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009e8:	e01e      	b.n	8000a28 <LED_RGB_Cycle+0x4d0>
 80009ea:	bf00      	nop
 80009ec:	20000004 	.word	0x20000004
 80009f0:	20000000 	.word	0x20000000
 80009f4:	4a8d      	ldr	r2, [pc, #564]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	2b0c      	cmp	r3, #12
 80009fe:	d104      	bne.n	8000a0a <LED_RGB_Cycle+0x4b2>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a08:	e00e      	b.n	8000a28 <LED_RGB_Cycle+0x4d0>
 8000a0a:	4a88      	ldr	r2, [pc, #544]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	2b10      	cmp	r3, #16
 8000a14:	d104      	bne.n	8000a20 <LED_RGB_Cycle+0x4c8>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1e:	e003      	b.n	8000a28 <LED_RGB_Cycle+0x4d0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a26:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000a28:	4b81      	ldr	r3, [pc, #516]	@ (8000c30 <LED_RGB_Cycle+0x6d8>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f863 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a34:	3301      	adds	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	2b64      	cmp	r3, #100	@ 0x64
 8000a3c:	f77f af3e 	ble.w	80008bc <LED_RGB_Cycle+0x364>
	}
	playBuzzerTone(100);
 8000a40:	2064      	movs	r0, #100	@ 0x64
 8000a42:	f7ff fd71 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000a46:	2364      	movs	r3, #100	@ 0x64
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a4a:	e0b8      	b.n	8000bbe <LED_RGB_Cycle+0x666>
		// Cyan to Blue
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 0);
 8000a4c:	4a77      	ldr	r2, [pc, #476]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <LED_RGB_Cycle+0x50a>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a60:	e02f      	b.n	8000ac2 <LED_RGB_Cycle+0x56a>
 8000a62:	4a72      	ldr	r2, [pc, #456]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d104      	bne.n	8000a78 <LED_RGB_Cycle+0x520>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a76:	e024      	b.n	8000ac2 <LED_RGB_Cycle+0x56a>
 8000a78:	4a6c      	ldr	r2, [pc, #432]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	d104      	bne.n	8000a8e <LED_RGB_Cycle+0x536>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a8c:	e019      	b.n	8000ac2 <LED_RGB_Cycle+0x56a>
 8000a8e:	4a67      	ldr	r2, [pc, #412]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d104      	bne.n	8000aa4 <LED_RGB_Cycle+0x54c>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	e00e      	b.n	8000ac2 <LED_RGB_Cycle+0x56a>
 8000aa4:	4a61      	ldr	r2, [pc, #388]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	2b10      	cmp	r3, #16
 8000aae:	d104      	bne.n	8000aba <LED_RGB_Cycle+0x562>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab8:	e003      	b.n	8000ac2 <LED_RGB_Cycle+0x56a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], dutyCycle);
 8000ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d104      	bne.n	8000ad8 <LED_RGB_Cycle+0x580>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	e02f      	b.n	8000b38 <LED_RGB_Cycle+0x5e0>
 8000ad8:	4a54      	ldr	r2, [pc, #336]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d104      	bne.n	8000aee <LED_RGB_Cycle+0x596>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	6393      	str	r3, [r2, #56]	@ 0x38
 8000aec:	e024      	b.n	8000b38 <LED_RGB_Cycle+0x5e0>
 8000aee:	4a4f      	ldr	r2, [pc, #316]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d104      	bne.n	8000b04 <LED_RGB_Cycle+0x5ac>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b02:	e019      	b.n	8000b38 <LED_RGB_Cycle+0x5e0>
 8000b04:	4a49      	ldr	r2, [pc, #292]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	2b0c      	cmp	r3, #12
 8000b0e:	d104      	bne.n	8000b1a <LED_RGB_Cycle+0x5c2>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	e00e      	b.n	8000b38 <LED_RGB_Cycle+0x5e0>
 8000b1a:	4a44      	ldr	r2, [pc, #272]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	2b10      	cmp	r3, #16
 8000b24:	d104      	bne.n	8000b30 <LED_RGB_Cycle+0x5d8>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2e:	e003      	b.n	8000b38 <LED_RGB_Cycle+0x5e0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 100);
 8000b38:	4a3c      	ldr	r2, [pc, #240]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <LED_RGB_Cycle+0x5f6>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2264      	movs	r2, #100	@ 0x64
 8000b4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b4c:	e02f      	b.n	8000bae <LED_RGB_Cycle+0x656>
 8000b4e:	4a37      	ldr	r2, [pc, #220]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d104      	bne.n	8000b64 <LED_RGB_Cycle+0x60c>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	2364      	movs	r3, #100	@ 0x64
 8000b60:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b62:	e024      	b.n	8000bae <LED_RGB_Cycle+0x656>
 8000b64:	4a31      	ldr	r2, [pc, #196]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d104      	bne.n	8000b7a <LED_RGB_Cycle+0x622>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2364      	movs	r3, #100	@ 0x64
 8000b76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b78:	e019      	b.n	8000bae <LED_RGB_Cycle+0x656>
 8000b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	2b0c      	cmp	r3, #12
 8000b84:	d104      	bne.n	8000b90 <LED_RGB_Cycle+0x638>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	2364      	movs	r3, #100	@ 0x64
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	e00e      	b.n	8000bae <LED_RGB_Cycle+0x656>
 8000b90:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	2b10      	cmp	r3, #16
 8000b9a:	d104      	bne.n	8000ba6 <LED_RGB_Cycle+0x64e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2364      	movs	r3, #100	@ 0x64
 8000ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba4:	e003      	b.n	8000bae <LED_RGB_Cycle+0x656>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	2364      	movs	r3, #100	@ 0x64
 8000bac:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <LED_RGB_Cycle+0x6d8>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ffa0 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f6bf af43 	bge.w	8000a4c <LED_RGB_Cycle+0x4f4>
	}
	playBuzzerTone(100);
 8000bc6:	2064      	movs	r0, #100	@ 0x64
 8000bc8:	f7ff fcae 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	e0bd      	b.n	8000d4e <LED_RGB_Cycle+0x7f6>
		// Blue to Magenta (Blue + Red)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 8000bd2:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <LED_RGB_Cycle+0x690>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6a3a      	ldr	r2, [r7, #32]
 8000be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000be6:	e034      	b.n	8000c52 <LED_RGB_Cycle+0x6fa>
 8000be8:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d104      	bne.n	8000bfe <LED_RGB_Cycle+0x6a6>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bfc:	e029      	b.n	8000c52 <LED_RGB_Cycle+0x6fa>
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d104      	bne.n	8000c14 <LED_RGB_Cycle+0x6bc>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c12:	e01e      	b.n	8000c52 <LED_RGB_Cycle+0x6fa>
 8000c14:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <LED_RGB_Cycle+0x6d4>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	2b0c      	cmp	r3, #12
 8000c1e:	d109      	bne.n	8000c34 <LED_RGB_Cycle+0x6dc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	e013      	b.n	8000c52 <LED_RGB_Cycle+0x6fa>
 8000c2a:	bf00      	nop
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000
 8000c34:	4a91      	ldr	r2, [pc, #580]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	2b10      	cmp	r3, #16
 8000c3e:	d104      	bne.n	8000c4a <LED_RGB_Cycle+0x6f2>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c48:	e003      	b.n	8000c52 <LED_RGB_Cycle+0x6fa>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 0);
 8000c52:	4a8a      	ldr	r2, [pc, #552]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d104      	bne.n	8000c68 <LED_RGB_Cycle+0x710>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c66:	e02f      	b.n	8000cc8 <LED_RGB_Cycle+0x770>
 8000c68:	4a84      	ldr	r2, [pc, #528]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d104      	bne.n	8000c7e <LED_RGB_Cycle+0x726>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c7c:	e024      	b.n	8000cc8 <LED_RGB_Cycle+0x770>
 8000c7e:	4a7f      	ldr	r2, [pc, #508]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d104      	bne.n	8000c94 <LED_RGB_Cycle+0x73c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c92:	e019      	b.n	8000cc8 <LED_RGB_Cycle+0x770>
 8000c94:	4a79      	ldr	r2, [pc, #484]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	2b0c      	cmp	r3, #12
 8000c9e:	d104      	bne.n	8000caa <LED_RGB_Cycle+0x752>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	e00e      	b.n	8000cc8 <LED_RGB_Cycle+0x770>
 8000caa:	4a74      	ldr	r2, [pc, #464]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	2b10      	cmp	r3, #16
 8000cb4:	d104      	bne.n	8000cc0 <LED_RGB_Cycle+0x768>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	e003      	b.n	8000cc8 <LED_RGB_Cycle+0x770>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 100);
 8000cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d104      	bne.n	8000cde <LED_RGB_Cycle+0x786>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2264      	movs	r2, #100	@ 0x64
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cdc:	e02f      	b.n	8000d3e <LED_RGB_Cycle+0x7e6>
 8000cde:	4a67      	ldr	r2, [pc, #412]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d104      	bne.n	8000cf4 <LED_RGB_Cycle+0x79c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	2364      	movs	r3, #100	@ 0x64
 8000cf0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cf2:	e024      	b.n	8000d3e <LED_RGB_Cycle+0x7e6>
 8000cf4:	4a61      	ldr	r2, [pc, #388]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d104      	bne.n	8000d0a <LED_RGB_Cycle+0x7b2>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d08:	e019      	b.n	8000d3e <LED_RGB_Cycle+0x7e6>
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	2b0c      	cmp	r3, #12
 8000d14:	d104      	bne.n	8000d20 <LED_RGB_Cycle+0x7c8>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	2364      	movs	r3, #100	@ 0x64
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	e00e      	b.n	8000d3e <LED_RGB_Cycle+0x7e6>
 8000d20:	4a56      	ldr	r2, [pc, #344]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	2b10      	cmp	r3, #16
 8000d2a:	d104      	bne.n	8000d36 <LED_RGB_Cycle+0x7de>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d34:	e003      	b.n	8000d3e <LED_RGB_Cycle+0x7e6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	2364      	movs	r3, #100	@ 0x64
 8000d3c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000d3e:	4b50      	ldr	r3, [pc, #320]	@ (8000e80 <LED_RGB_Cycle+0x928>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fed8 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	2b64      	cmp	r3, #100	@ 0x64
 8000d52:	f77f af3e 	ble.w	8000bd2 <LED_RGB_Cycle+0x67a>
	}
	playBuzzerTone(100);
 8000d56:	2064      	movs	r0, #100	@ 0x64
 8000d58:	f7ff fbe6 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000d5c:	2364      	movs	r3, #100	@ 0x64
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e0bd      	b.n	8000ede <LED_RGB_Cycle+0x986>
		// Magenta to Red
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 100);
 8000d62:	4a46      	ldr	r2, [pc, #280]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <LED_RGB_Cycle+0x820>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2264      	movs	r2, #100	@ 0x64
 8000d74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d76:	e02f      	b.n	8000dd8 <LED_RGB_Cycle+0x880>
 8000d78:	4a40      	ldr	r2, [pc, #256]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d104      	bne.n	8000d8e <LED_RGB_Cycle+0x836>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2364      	movs	r3, #100	@ 0x64
 8000d8a:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d8c:	e024      	b.n	8000dd8 <LED_RGB_Cycle+0x880>
 8000d8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d104      	bne.n	8000da4 <LED_RGB_Cycle+0x84c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	2364      	movs	r3, #100	@ 0x64
 8000da0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000da2:	e019      	b.n	8000dd8 <LED_RGB_Cycle+0x880>
 8000da4:	4a35      	ldr	r2, [pc, #212]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	2b0c      	cmp	r3, #12
 8000dae:	d104      	bne.n	8000dba <LED_RGB_Cycle+0x862>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2364      	movs	r3, #100	@ 0x64
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	e00e      	b.n	8000dd8 <LED_RGB_Cycle+0x880>
 8000dba:	4a30      	ldr	r2, [pc, #192]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d104      	bne.n	8000dd0 <LED_RGB_Cycle+0x878>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dce:	e003      	b.n	8000dd8 <LED_RGB_Cycle+0x880>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 0);
 8000dd8:	4a28      	ldr	r2, [pc, #160]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <LED_RGB_Cycle+0x896>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dec:	e02f      	b.n	8000e4e <LED_RGB_Cycle+0x8f6>
 8000dee:	4a23      	ldr	r2, [pc, #140]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d104      	bne.n	8000e04 <LED_RGB_Cycle+0x8ac>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e02:	e024      	b.n	8000e4e <LED_RGB_Cycle+0x8f6>
 8000e04:	4a1d      	ldr	r2, [pc, #116]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d104      	bne.n	8000e1a <LED_RGB_Cycle+0x8c2>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e18:	e019      	b.n	8000e4e <LED_RGB_Cycle+0x8f6>
 8000e1a:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d104      	bne.n	8000e30 <LED_RGB_Cycle+0x8d8>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	e00e      	b.n	8000e4e <LED_RGB_Cycle+0x8f6>
 8000e30:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	2b10      	cmp	r3, #16
 8000e3a:	d104      	bne.n	8000e46 <LED_RGB_Cycle+0x8ee>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e44:	e003      	b.n	8000e4e <LED_RGB_Cycle+0x8f6>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], dutyCycle);
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d104      	bne.n	8000e64 <LED_RGB_Cycle+0x90c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e62:	e034      	b.n	8000ece <LED_RGB_Cycle+0x976>
 8000e64:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <LED_RGB_Cycle+0x924>)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d109      	bne.n	8000e84 <LED_RGB_Cycle+0x92c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e78:	e029      	b.n	8000ece <LED_RGB_Cycle+0x976>
 8000e7a:	bf00      	nop
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	20000000 	.word	0x20000000
 8000e84:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <LED_RGB_Cycle+0x9c8>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d104      	bne.n	8000e9a <LED_RGB_Cycle+0x942>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e98:	e019      	b.n	8000ece <LED_RGB_Cycle+0x976>
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <LED_RGB_Cycle+0x9c8>)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	2b0c      	cmp	r3, #12
 8000ea4:	d104      	bne.n	8000eb0 <LED_RGB_Cycle+0x958>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	e00e      	b.n	8000ece <LED_RGB_Cycle+0x976>
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <LED_RGB_Cycle+0x9c8>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	d104      	bne.n	8000ec6 <LED_RGB_Cycle+0x96e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec4:	e003      	b.n	8000ece <LED_RGB_Cycle+0x976>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <LED_RGB_Cycle+0x9cc>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fe10 	bl	8001af8 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f6bf af3e 	bge.w	8000d62 <LED_RGB_Cycle+0x80a>
	}
	playBuzzerTone(100);
 8000ee6:	2064      	movs	r0, #100	@ 0x64
 8000ee8:	f7ff fb1e 	bl	8000528 <playBuzzerTone>

	for (int i = 0; i < 3; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	e00a      	b.n	8000f08 <LED_RGB_Cycle+0x9b0>
	  HAL_TIM_PWM_Stop(&htim3, channels[i]);
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <LED_RGB_Cycle+0x9c8>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	4619      	mov	r1, r3
 8000efc:	480a      	ldr	r0, [pc, #40]	@ (8000f28 <LED_RGB_Cycle+0x9d0>)
 8000efe:	f003 f86f 	bl	8003fe0 <HAL_TIM_PWM_Stop>
	for (int i = 0; i < 3; i++) {
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	ddf1      	ble.n	8000ef2 <LED_RGB_Cycle+0x99a>
    }

	playBuzzerTone(500);
 8000f0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f12:	f7ff fb09 	bl	8000528 <playBuzzerTone>

}
 8000f16:	bf00      	nop
 8000f18:	3738      	adds	r7, #56	@ 0x38
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000004 	.word	0x20000004
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000264 	.word	0x20000264

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fd85 	bl	8001a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f82a 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 fa02 	bl	8001340 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f3c:	f000 f896 	bl	800106c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f40:	f000 f9a0 	bl	8001284 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f44:	f000 f9ce 	bl	80012e4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8000f48:	f000 f94e 	bl	80011e8 <MX_TIM10_Init>
  MX_TIM3_Init();
 8000f4c:	f000 f8dc 	bl	8001108 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)){
 8000f50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f54:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <main+0x54>)
 8000f56:	f001 fbd3 	bl	8002700 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <main+0x3c>
		touchState = 1;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <main+0x58>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e002      	b.n	8000f6e <main+0x42>
	  }
	  else{
		touchState = 0;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <main+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	  }

	  if (touchState == 1) {
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <main+0x58>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d1ec      	bne.n	8000f50 <main+0x24>
		  LED_RGB_Cycle(&htim3);
 8000f76:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <main+0x5c>)
 8000f78:	f7ff faee 	bl	8000558 <LED_RGB_Cycle>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)){
 8000f7c:	e7e8      	b.n	8000f50 <main+0x24>
 8000f7e:	bf00      	nop
 8000f80:	40020800 	.word	0x40020800
 8000f84:	20000178 	.word	0x20000178
 8000f88:	20000264 	.word	0x20000264

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	@ 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2234      	movs	r2, #52	@ 0x34
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fd2f 	bl	80059fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fb0:	f001 fd12 	bl	80029d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <SystemClock_Config+0xd8>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001064 <SystemClock_Config+0xd8>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <SystemClock_Config+0xd8>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fe8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ffc:	23d8      	movs	r3, #216	@ 0xd8
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001004:	2309      	movs	r3, #9
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fd41 	bl	8002a98 <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800101c:	f000 fa4a 	bl	80014b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001020:	f001 fcea 	bl	80029f8 <HAL_PWREx_EnableOverDrive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800102a:	f000 fa43 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001040:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2107      	movs	r1, #7
 800104c:	4618      	mov	r0, r3
 800104e:	f001 ffd1 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001058:	f000 fa2c 	bl	80014b4 <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	@ 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_ETH_Init+0x84>)
 8001072:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <MX_ETH_Init+0x88>)
 8001074:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <MX_ETH_Init+0x8c>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ETH_Init+0x8c>)
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ETH_Init+0x8c>)
 8001084:	22e1      	movs	r2, #225	@ 0xe1
 8001086:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ETH_Init+0x8c>)
 800108a:	2200      	movs	r2, #0
 800108c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ETH_Init+0x8c>)
 8001090:	2200      	movs	r2, #0
 8001092:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ETH_Init+0x8c>)
 8001096:	2200      	movs	r2, #0
 8001098:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_ETH_Init+0x84>)
 800109c:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <MX_ETH_Init+0x8c>)
 800109e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_ETH_Init+0x84>)
 80010a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_ETH_Init+0x84>)
 80010aa:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <MX_ETH_Init+0x90>)
 80010ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_ETH_Init+0x84>)
 80010b0:	4a13      	ldr	r2, [pc, #76]	@ (8001100 <MX_ETH_Init+0x94>)
 80010b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_ETH_Init+0x84>)
 80010b6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80010ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <MX_ETH_Init+0x84>)
 80010be:	f000 fe25 	bl	8001d0c <HAL_ETH_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 f9f4 	bl	80014b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010cc:	2238      	movs	r2, #56	@ 0x38
 80010ce:	2100      	movs	r1, #0
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <MX_ETH_Init+0x98>)
 80010d2:	f004 fc94 	bl	80059fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_ETH_Init+0x98>)
 80010d8:	2221      	movs	r2, #33	@ 0x21
 80010da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_ETH_Init+0x98>)
 80010de:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80010e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_ETH_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001b4 	.word	0x200001b4
 80010f4:	40028000 	.word	0x40028000
 80010f8:	20000864 	.word	0x20000864
 80010fc:	200000bc 	.word	0x200000bc
 8001100:	2000001c 	.word	0x2000001c
 8001104:	2000017c 	.word	0x2000017c

08001108 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 800112e:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <MX_TIM3_Init+0xdc>)
 8001130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5400-1;
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001134:	f241 5217 	movw	r2, #5399	@ 0x1517
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001142:	2263      	movs	r2, #99	@ 0x63
 8001144:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001152:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001154:	f002 fdf3 	bl	8003d3e <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800115e:	f000 f9a9 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	481b      	ldr	r0, [pc, #108]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001172:	f003 fbf9 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 f99a 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001180:	2360      	movs	r3, #96	@ 0x60
 8001182:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 8001198:	f002 ffa2 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80011a2:	f000 f987 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	2208      	movs	r2, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 80011ae:	f002 ff97 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011b8:	f000 f97c 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	220c      	movs	r2, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 80011c4:	f002 ff8c 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80011ce:	f000 f971 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011d2:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM3_Init+0xd8>)
 80011d4:	f000 fa90 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	@ 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000264 	.word	0x20000264
 80011e4:	40000400 	.word	0x40000400

080011e8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_TIM10_Init+0x94>)
 8001202:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <MX_TIM10_Init+0x98>)
 8001204:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 5400;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_TIM10_Init+0x94>)
 8001208:	f241 5218 	movw	r2, #5400	@ 0x1518
 800120c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_TIM10_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_TIM10_Init+0x94>)
 8001216:	2263      	movs	r2, #99	@ 0x63
 8001218:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_TIM10_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_TIM10_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001226:	4815      	ldr	r0, [pc, #84]	@ (800127c <MX_TIM10_Init+0x94>)
 8001228:	f002 fd32 	bl	8003c90 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001232:	f000 f93f 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_TIM10_Init+0x94>)
 8001238:	f002 fd81 	bl	8003d3e <HAL_TIM_PWM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001242:	f000 f937 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	@ 0x60
 8001248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	@ (800127c <MX_TIM10_Init+0x94>)
 800125e:	f002 ff3f 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001268:	f000 f924 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <MX_TIM10_Init+0x94>)
 800126e:	f000 fa43 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b0 	.word	0x200002b0
 8001280:	40014400 	.word	0x40014400

08001284 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <MX_USART3_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_USART3_UART_Init+0x58>)
 80012c8:	f003 fbdc 	bl	8004a84 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f8ef 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002fc 	.word	0x200002fc
 80012e0:	40004800 	.word	0x40004800

080012e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f2:	2206      	movs	r2, #6
 80012f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001304:	2202      	movs	r2, #2
 8001306:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130a:	2201      	movs	r2, #1
 800130c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131c:	2201      	movs	r2, #1
 800131e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001328:	f001 fa1b 	bl	8002762 <HAL_PCD_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 f8bf 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000384 	.word	0x20000384

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a52      	ldr	r2, [pc, #328]	@ (80014a4 <MX_GPIO_Init+0x164>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b50      	ldr	r3, [pc, #320]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b4d      	ldr	r3, [pc, #308]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a4c      	ldr	r2, [pc, #304]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <MX_GPIO_Init+0x164>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <MX_GPIO_Init+0x164>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <MX_GPIO_Init+0x164>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a40      	ldr	r2, [pc, #256]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b3e      	ldr	r3, [pc, #248]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a3a      	ldr	r2, [pc, #232]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a34      	ldr	r2, [pc, #208]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0x164>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001404:	4828      	ldr	r0, [pc, #160]	@ (80014a8 <MX_GPIO_Init+0x168>)
 8001406:	f001 f993 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	@ 0x40
 800140e:	4827      	ldr	r0, [pc, #156]	@ (80014ac <MX_GPIO_Init+0x16c>)
 8001410:	f001 f98e 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <MX_GPIO_Init+0x170>)
 800142c:	f000 ffbc 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001430:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4817      	ldr	r0, [pc, #92]	@ (80014a8 <MX_GPIO_Init+0x168>)
 800144a:	f000 ffad 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4811      	ldr	r0, [pc, #68]	@ (80014ac <MX_GPIO_Init+0x16c>)
 8001466:	f000 ff9f 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <MX_GPIO_Init+0x16c>)
 800147e:	f000 ff93 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <MX_GPIO_Init+0x170>)
 8001498:	f000 ff86 	bl	80023a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	@ 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40020800 	.word	0x40020800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_MspInit+0x44>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_MspInit+0x44>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_MspInit+0x44>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_MspInit+0x44>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_MspInit+0x44>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	@ 0x38
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a4e      	ldr	r2, [pc, #312]	@ (8001660 <HAL_ETH_MspInit+0x158>)
 8001526:	4293      	cmp	r3, r2
 8001528:	f040 8096 	bne.w	8001658 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a4c      	ldr	r2, [pc, #304]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	4a46      	ldr	r2, [pc, #280]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800154a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800154e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001550:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	4a40      	ldr	r2, [pc, #256]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001562:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001566:	6313      	str	r3, [r2, #48]	@ 0x30
 8001568:	4b3e      	ldr	r3, [pc, #248]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4a3a      	ldr	r2, [pc, #232]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001580:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	4a34      	ldr	r2, [pc, #208]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	@ 0x30
 8001598:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c8:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_ETH_MspInit+0x15c>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015d4:	2332      	movs	r3, #50	@ 0x32
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015e4:	230b      	movs	r3, #11
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	481e      	ldr	r0, [pc, #120]	@ (8001668 <HAL_ETH_MspInit+0x160>)
 80015f0:	f000 feda 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015f4:	2386      	movs	r3, #134	@ 0x86
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001604:	230b      	movs	r3, #11
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4817      	ldr	r0, [pc, #92]	@ (800166c <HAL_ETH_MspInit+0x164>)
 8001610:	f000 feca 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001626:	230b      	movs	r3, #11
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <HAL_ETH_MspInit+0x168>)
 8001632:	f000 feb9 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001636:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001648:	230b      	movs	r3, #11
 800164a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4808      	ldr	r0, [pc, #32]	@ (8001674 <HAL_ETH_MspInit+0x16c>)
 8001654:	f000 fea8 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	@ 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40028000 	.word	0x40028000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40021800 	.word	0x40021800

08001678 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10b      	bne.n	80016a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10b      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_TIM_Base_MspInit+0x3c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <HAL_TIM_Base_MspInit+0x3c>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <HAL_TIM_Base_MspInit+0x3c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40014400 	.word	0x40014400
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a22      	ldr	r2, [pc, #136]	@ (80017a0 <HAL_TIM_MspPostInit+0xa8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d11d      	bne.n	8001756 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001732:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001744:	2302      	movs	r3, #2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4816      	ldr	r0, [pc, #88]	@ (80017a8 <HAL_TIM_MspPostInit+0xb0>)
 8001750:	f000 fe2a 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001754:	e020      	b.n	8001798 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM10)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_TIM_MspPostInit+0xb4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6313      	str	r3, [r2, #48]	@ 0x30
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_TIM_MspPostInit+0xac>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001778:	2340      	movs	r3, #64	@ 0x40
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001788:	2303      	movs	r3, #3
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <HAL_TIM_MspPostInit+0xb8>)
 8001794:	f000 fe08 	bl	80023a8 <HAL_GPIO_Init>
}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	@ 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40021400 	.word	0x40021400

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0ae      	sub	sp, #184	@ 0xb8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2290      	movs	r2, #144	@ 0x90
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 f912 	bl	80059fe <memset>
  if(huart->Instance==USART3)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_UART_MspInit+0xb4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d13c      	bne.n	800185e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fe24 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017fe:	f7ff fe59 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_UART_MspInit+0xb8>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a19      	ldr	r2, [pc, #100]	@ (800186c <HAL_UART_MspInit+0xb8>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b17      	ldr	r3, [pc, #92]	@ (800186c <HAL_UART_MspInit+0xb8>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_UART_MspInit+0xb8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a13      	ldr	r2, [pc, #76]	@ (800186c <HAL_UART_MspInit+0xb8>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_UART_MspInit+0xb8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001832:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800184c:	2307      	movs	r3, #7
 800184e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001852:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	@ (8001870 <HAL_UART_MspInit+0xbc>)
 800185a:	f000 fda5 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800185e:	bf00      	nop
 8001860:	37b8      	adds	r7, #184	@ 0xb8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40004800 	.word	0x40004800
 800186c:	40023800 	.word	0x40023800
 8001870:	40020c00 	.word	0x40020c00

08001874 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ae      	sub	sp, #184	@ 0xb8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2290      	movs	r2, #144	@ 0x90
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f004 f8b2 	bl	80059fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a2:	d159      	bne.n	8001958 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 fdc3 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018c0:	f7ff fdf8 	bl	80014b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	4a25      	ldr	r2, [pc, #148]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018dc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018f6:	230a      	movs	r3, #10
 80018f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001900:	4619      	mov	r1, r3
 8001902:	4818      	ldr	r0, [pc, #96]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 8001904:	f000 fd50 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001920:	4619      	mov	r1, r3
 8001922:	4810      	ldr	r0, [pc, #64]	@ (8001964 <HAL_PCD_MspInit+0xf0>)
 8001924:	f000 fd40 	bl	80023a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 800192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192c:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 800192e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001932:	6353      	str	r3, [r2, #52]	@ 0x34
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	4a06      	ldr	r2, [pc, #24]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <HAL_PCD_MspInit+0xec>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001958:	bf00      	nop
 800195a:	37b8      	adds	r7, #184	@ 0xb8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <NMI_Handler+0x4>

08001970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <MemManage_Handler+0x4>

08001980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <UsageFault_Handler+0x4>

08001990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f000 f87b 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f0:	f7ff ffea 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f003 fff9 	bl	8005a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff fa85 	bl	8000f2c <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a30:	08005a98 	.word	0x08005a98
  ldr r2, =_sbss
 8001a34:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001a38:	20000870 	.word	0x20000870

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>

08001a3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f000 f92e 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f805 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4e:	f7ff fd37 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x54>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f93b 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00e      	b.n	8001aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80a      	bhi.n	8001aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 f911 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_InitTick+0x5c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	20000018 	.word	0x20000018
 8001ab4:	20000014 	.word	0x20000014

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000018 	.word	0x20000018
 8001adc:	2000086c 	.word	0x2000086c

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2000086c 	.word	0x2000086c

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000018 	.word	0x20000018

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	05fa0000 	.word	0x05fa0000

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff47 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff5c 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffb0 	bl	8001c60 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e086      	b.n	8001e2c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2223      	movs	r2, #35	@ 0x23
 8001d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fbe9 	bl	8001508 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	4b3f      	ldr	r3, [pc, #252]	@ (8001e34 <HAL_ETH_Init+0x128>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e34 <HAL_ETH_Init+0x128>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d42:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <HAL_ETH_Init+0x128>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <HAL_ETH_Init+0x12c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a39      	ldr	r2, [pc, #228]	@ (8001e38 <HAL_ETH_Init+0x12c>)
 8001d54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d58:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d5a:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <HAL_ETH_Init+0x12c>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4935      	ldr	r1, [pc, #212]	@ (8001e38 <HAL_ETH_Init+0x12c>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d68:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <HAL_ETH_Init+0x12c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7ff feac 	bl	8001ae0 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d8a:	e011      	b.n	8001db0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d8c:	f7ff fea8 	bl	8001ae0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d9a:	d909      	bls.n	8001db0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	22e0      	movs	r2, #224	@ 0xe0
 8001da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e03d      	b.n	8001e2c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e4      	bne.n	8001d8c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f97a 	bl	80020bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fa25 	bl	8002218 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa7b 	bl	80022ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f9e3 	bl	80021a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_ETH_Init+0x130>)
 8001e00:	430b      	orrs	r3, r1
 8001e02:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001e16:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2210      	movs	r2, #16
 8001e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	00020060 	.word	0x00020060

08001e40 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <ETH_SetMACConfig+0x164>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7b9b      	ldrb	r3, [r3, #14]
 8001e5e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	7c12      	ldrb	r2, [r2, #16]
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d102      	bne.n	8001e6e <ETH_SetMACConfig+0x2e>
 8001e68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e6c:	e000      	b.n	8001e70 <ETH_SetMACConfig+0x30>
 8001e6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	7c52      	ldrb	r2, [r2, #17]
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d102      	bne.n	8001e80 <ETH_SetMACConfig+0x40>
 8001e7a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e7e:	e000      	b.n	8001e82 <ETH_SetMACConfig+0x42>
 8001e80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7fdb      	ldrb	r3, [r3, #31]
 8001e8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	7f92      	ldrb	r2, [r2, #30]
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d102      	bne.n	8001ea6 <ETH_SetMACConfig+0x66>
 8001ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea4:	e000      	b.n	8001ea8 <ETH_SetMACConfig+0x68>
 8001ea6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7f1b      	ldrb	r3, [r3, #28]
 8001eae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	791b      	ldrb	r3, [r3, #4]
 8001ebc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d102      	bne.n	8001ed0 <ETH_SetMACConfig+0x90>
 8001eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ece:	e000      	b.n	8001ed2 <ETH_SetMACConfig+0x92>
 8001ed0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7bdb      	ldrb	r3, [r3, #15]
 8001ed8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ee0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ee8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fdf8 	bl	8001af8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d101      	bne.n	8001f36 <ETH_SetMACConfig+0xf6>
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	e000      	b.n	8001f38 <ETH_SetMACConfig+0xf8>
 8001f36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d101      	bne.n	8001f4e <ETH_SetMACConfig+0x10e>
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x110>
 8001f4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f58:	2a01      	cmp	r2, #1
 8001f5a:	d101      	bne.n	8001f60 <ETH_SetMACConfig+0x120>
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	e000      	b.n	8001f62 <ETH_SetMACConfig+0x122>
 8001f60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f6a:	2a01      	cmp	r2, #1
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0x132>
 8001f6e:	2202      	movs	r2, #2
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x134>
 8001f72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff fdb3 	bl	8001af8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	fd20810f 	.word	0xfd20810f

08001fa8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <ETH_SetDMAConfig+0x110>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	7b1b      	ldrb	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <ETH_SetDMAConfig+0x2c>
 8001fce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fd2:	e000      	b.n	8001fd6 <ETH_SetDMAConfig+0x2e>
 8001fd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	7b5b      	ldrb	r3, [r3, #13]
 8001fda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	7f52      	ldrb	r2, [r2, #29]
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d102      	bne.n	8001fec <ETH_SetDMAConfig+0x44>
 8001fe6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fea:	e000      	b.n	8001fee <ETH_SetDMAConfig+0x46>
 8001fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	7b9b      	ldrb	r3, [r3, #14]
 8001ff4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ff6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ffc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	7f1b      	ldrb	r3, [r3, #28]
 8002002:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002004:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7f9b      	ldrb	r3, [r3, #30]
 800200a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800200c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002012:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800201a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201c:	4313      	orrs	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202c:	461a      	mov	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fd5a 	bl	8001af8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800205c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002062:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002068:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002070:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002072:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800207a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002080:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800208a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800208e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fd2b 	bl	8001af8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	f8de3f23 	.word	0xf8de3f23

080020bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0a6      	sub	sp, #152	@ 0x98
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020fe:	2300      	movs	r3, #0
 8002100:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002108:	2300      	movs	r3, #0
 800210a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002128:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800212a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800212e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002136:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fe7f 	bl	8001e40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002146:	2301      	movs	r3, #1
 8002148:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800214a:	2301      	movs	r3, #1
 800214c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002150:	2301      	movs	r3, #1
 8002152:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800216e:	2301      	movs	r3, #1
 8002170:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002176:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002178:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800217c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800217e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002182:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff05 	bl	8001fa8 <ETH_SetDMAConfig>
}
 800219e:	bf00      	nop
 80021a0:	3798      	adds	r7, #152	@ 0x98
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3305      	adds	r3, #5
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	3204      	adds	r2, #4
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <ETH_MACAddressConfig+0x68>)
 80021ca:	4413      	add	r3, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3303      	adds	r3, #3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	061a      	lsls	r2, r3, #24
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <ETH_MACAddressConfig+0x6c>)
 80021fa:	4413      	add	r3, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40028040 	.word	0x40028040
 8002214:	40028044 	.word	0x40028044

08002218 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e03e      	b.n	80022a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	3206      	adds	r2, #6
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d80c      	bhi.n	8002288 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	e004      	b.n	8002292 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d9bd      	bls.n	8002226 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022bc:	611a      	str	r2, [r3, #16]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e048      	b.n	800236a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002314:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	3212      	adds	r2, #18
 8002336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d80c      	bhi.n	800235a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	e004      	b.n	8002364 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d9b3      	bls.n	80022d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239a:	60da      	str	r2, [r3, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e175      	b.n	80026b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8164 	bne.w	80026ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x56>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80be 	beq.w	80026ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	4b66      	ldr	r3, [pc, #408]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a65      	ldr	r2, [pc, #404]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_GPIO_Init+0x324>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800254a:	4a61      	ldr	r2, [pc, #388]	@ (80026d0 <HAL_GPIO_Init+0x328>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a58      	ldr	r2, [pc, #352]	@ (80026d4 <HAL_GPIO_Init+0x32c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d037      	beq.n	80025e6 <HAL_GPIO_Init+0x23e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_GPIO_Init+0x330>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_GPIO_Init+0x23a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_GPIO_Init+0x334>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02b      	beq.n	80025de <HAL_GPIO_Init+0x236>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a55      	ldr	r2, [pc, #340]	@ (80026e0 <HAL_GPIO_Init+0x338>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x232>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <HAL_GPIO_Init+0x33c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x22e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a53      	ldr	r2, [pc, #332]	@ (80026e8 <HAL_GPIO_Init+0x340>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x22a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	@ (80026ec <HAL_GPIO_Init+0x344>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a51      	ldr	r2, [pc, #324]	@ (80026f0 <HAL_GPIO_Init+0x348>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_GPIO_Init+0x34c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4f      	ldr	r2, [pc, #316]	@ (80026f8 <HAL_GPIO_Init+0x350>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x21a>
 80025be:	2309      	movs	r3, #9
 80025c0:	e012      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c2:	230a      	movs	r3, #10
 80025c4:	e010      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00e      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00c      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00a      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025f8:	4935      	ldr	r1, [pc, #212]	@ (80026d0 <HAL_GPIO_Init+0x328>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262a:	4a34      	ldr	r2, [pc, #208]	@ (80026fc <HAL_GPIO_Init+0x354>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002654:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_GPIO_Init+0x354>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267e:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_GPIO_Init+0x354>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <HAL_GPIO_Init+0x354>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f ae86 	bls.w	80023c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40021400 	.word	0x40021400
 80026ec:	40021800 	.word	0x40021800
 80026f0:	40021c00 	.word	0x40021c00
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40022400 	.word	0x40022400
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	887b      	ldrh	r3, [r7, #2]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af02      	add	r7, sp, #8
 8002768:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e108      	b.n	8002986 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff f870 	bl	8001874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2203      	movs	r2, #3
 8002798:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a2:	d102      	bne.n	80027aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fe90 	bl	80054d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7c1a      	ldrb	r2, [r3, #16]
 80027bc:	f88d 2000 	strb.w	r2, [sp]
 80027c0:	3304      	adds	r3, #4
 80027c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c4:	f002 fe2c 	bl	8005420 <USB_CoreInit>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0d5      	b.n	8002986 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fe88 	bl	80054f6 <USB_SetCurrentMode>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0c6      	b.n	8002986 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e04a      	b.n	8002894 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3315      	adds	r3, #21
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3314      	adds	r3, #20
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	b298      	uxth	r0, r3
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	332e      	adds	r3, #46	@ 0x2e
 800283a:	4602      	mov	r2, r0
 800283c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3318      	adds	r3, #24
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	331c      	adds	r3, #28
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3320      	adds	r3, #32
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3324      	adds	r3, #36	@ 0x24
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3301      	adds	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	791b      	ldrb	r3, [r3, #4]
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	429a      	cmp	r2, r3
 800289c:	d3af      	bcc.n	80027fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e044      	b.n	800292e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	791b      	ldrb	r3, [r3, #4]
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3b5      	bcc.n	80028a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7c1a      	ldrb	r2, [r3, #16]
 8002940:	f88d 2000 	strb.w	r2, [sp]
 8002944:	3304      	adds	r3, #4
 8002946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002948:	f002 fe22 	bl	8005590 <USB_DevInit>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e013      	b.n	8002986 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f80b 	bl	8002990 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ffdd 	bl	800593e <USB_DevDisconnect>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029be:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	10000003 	.word	0x10000003

080029d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000

080029f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	4a22      	ldr	r2, [pc, #136]	@ (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a26:	f7ff f85b 	bl	8001ae0 <HAL_GetTick>
 8002a2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a2c:	e009      	b.n	8002a42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a2e:	f7ff f857 	bl	8001ae0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a3c:	d901      	bls.n	8002a42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e022      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7ff f840 	bl	8001ae0 <HAL_GetTick>
 8002a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a62:	e009      	b.n	8002a78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a64:	f7ff f83c 	bl	8001ae0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a72:	d901      	bls.n	8002a78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e007      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a84:	d1ee      	bne.n	8002a64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e29b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002abc:	4b96      	ldr	r3, [pc, #600]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac8:	4b93      	ldr	r3, [pc, #588]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d112      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
 8002ad4:	4b90      	ldr	r3, [pc, #576]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae0:	d10b      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d06c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x130>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d168      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e275      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x7a>
 8002b04:	4b84      	ldr	r3, [pc, #528]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a83      	ldr	r2, [pc, #524]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e02e      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x9c>
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b7c      	ldr	r3, [pc, #496]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a72      	ldr	r2, [pc, #456]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b6c      	ldr	r3, [pc, #432]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6b      	ldr	r2, [pc, #428]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe ffb2 	bl	8001ae0 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe ffae 	bl	8001ae0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e229      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe8>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe ff9e 	bl	8001ae0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe ff9a 	bl	8001ae0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e215      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b57      	ldr	r3, [pc, #348]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x110>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d069      	beq.n	8002caa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd6:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x190>
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1e9      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	493d      	ldr	r1, [pc, #244]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e040      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a38      	ldr	r2, [pc, #224]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff50 	bl	8001ae0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe ff4c 	bl	8001ae0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1c7      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b30      	ldr	r3, [pc, #192]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4929      	ldr	r1, [pc, #164]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
 8002c76:	e018      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe ff2c 	bl	8001ae0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7fe ff28 	bl	8001ae0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1a3      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d038      	beq.n	8002d28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d019      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc2:	4a15      	ldr	r2, [pc, #84]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe ff09 	bl	8001ae0 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe ff05 	bl	8001ae0 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e180      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x23a>
 8002cf0:	e01a      	b.n	8002d28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	4a08      	ldr	r2, [pc, #32]	@ (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe feef 	bl	8001ae0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe feeb 	bl	8001ae0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d903      	bls.n	8002d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e166      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
 8002d18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a4 	beq.w	8002e7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b8c      	ldr	r3, [pc, #560]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b89      	ldr	r3, [pc, #548]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	4a88      	ldr	r2, [pc, #544]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4e:	4b86      	ldr	r3, [pc, #536]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	4b83      	ldr	r3, [pc, #524]	@ (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d6a:	4b80      	ldr	r3, [pc, #512]	@ (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7fe feb3 	bl	8001ae0 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7fe feaf 	bl	8001ae0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	@ 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e12a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d90:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x31a>
 8002da4:	4b70      	ldr	r3, [pc, #448]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da8:	4a6f      	ldr	r2, [pc, #444]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x33c>
 8002dba:	4b6b      	ldr	r3, [pc, #428]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc6:	4b68      	ldr	r3, [pc, #416]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a67      	ldr	r2, [pc, #412]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x35e>
 8002ddc:	4b62      	ldr	r3, [pc, #392]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de0:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a5e      	ldr	r2, [pc, #376]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002df6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e02:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fe63 	bl	8001ae0 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fe5f 	bl	8001ae0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0d8      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b4c      	ldr	r3, [pc, #304]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x386>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe fe4d 	bl	8001ae0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fe49 	bl	8001ae0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0c2      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b41      	ldr	r3, [pc, #260]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	4a3c      	ldr	r2, [pc, #240]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80ae 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e88:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d06d      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d14b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b32      	ldr	r3, [pc, #200]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fe1a 	bl	8001ae0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fe16 	bl	8001ae0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e091      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	019b      	lsls	r3, r3, #6
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	071b      	lsls	r3, r3, #28
 8002efa:	491b      	ldr	r1, [pc, #108]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fde8 	bl	8001ae0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fde4 	bl	8001ae0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e05f      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x47c>
 8002f32:	e057      	b.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0b      	ldr	r2, [pc, #44]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fdce 	bl	8001ae0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fdca 	bl	8001ae0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e045      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4b0>
 8002f66:	e03d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <HAL_RCC_OscConfig+0x558>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d030      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d129      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d122      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d119      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 020f 	bic.w	r2, r3, #15
 8003022:	4965      	ldr	r1, [pc, #404]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe fcfa 	bl	8001ae0 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe fcf6 	bl	8001ae0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4922      	ldr	r1, [pc, #136]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1d0>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x1d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fc56 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08005a70 	.word	0x08005a70
 80031c4:	20000010 	.word	0x20000010
 80031c8:	20000014 	.word	0x20000014

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b094      	sub	sp, #80	@ 0x50
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d8:	2300      	movs	r3, #0
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031dc:	2300      	movs	r3, #0
 80031de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b79      	ldr	r3, [pc, #484]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80e1 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e0db      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b73      	ldr	r3, [pc, #460]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003204:	e0db      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003208:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800320a:	e0d8      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b6f      	ldr	r3, [pc, #444]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003216:	4b6d      	ldr	r3, [pc, #436]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b6a      	ldr	r3, [pc, #424]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800322c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	633b      	str	r3, [r7, #48]	@ 0x30
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
 800323a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800323e:	4622      	mov	r2, r4
 8003240:	462b      	mov	r3, r5
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4621      	mov	r1, r4
 8003258:	1a51      	subs	r1, r2, r1
 800325a:	6139      	str	r1, [r7, #16]
 800325c:	4629      	mov	r1, r5
 800325e:	eb63 0301 	sbc.w	r3, r3, r1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003270:	4659      	mov	r1, fp
 8003272:	018b      	lsls	r3, r1, #6
 8003274:	4651      	mov	r1, sl
 8003276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327a:	4651      	mov	r1, sl
 800327c:	018a      	lsls	r2, r1, #6
 800327e:	4651      	mov	r1, sl
 8003280:	ebb2 0801 	subs.w	r8, r2, r1
 8003284:	4659      	mov	r1, fp
 8003286:	eb63 0901 	sbc.w	r9, r3, r1
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329e:	4690      	mov	r8, r2
 80032a0:	4699      	mov	r9, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	eb18 0303 	adds.w	r3, r8, r3
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	462b      	mov	r3, r5
 80032ac:	eb49 0303 	adc.w	r3, r9, r3
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032be:	4629      	mov	r1, r5
 80032c0:	024b      	lsls	r3, r1, #9
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c8:	4621      	mov	r1, r4
 80032ca:	024a      	lsls	r2, r1, #9
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032dc:	f7fc ffac 	bl	8000238 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e8:	e058      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	4611      	mov	r1, r2
 80032f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4641      	mov	r1, r8
 800331e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003322:	4649      	mov	r1, r9
 8003324:	eb63 0b01 	sbc.w	fp, r3, r1
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003334:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003338:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800333c:	ebb2 040a 	subs.w	r4, r2, sl
 8003340:	eb63 050b 	sbc.w	r5, r3, fp
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	00eb      	lsls	r3, r5, #3
 800334e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003352:	00e2      	lsls	r2, r4, #3
 8003354:	4614      	mov	r4, r2
 8003356:	461d      	mov	r5, r3
 8003358:	4643      	mov	r3, r8
 800335a:	18e3      	adds	r3, r4, r3
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	464b      	mov	r3, r9
 8003360:	eb45 0303 	adc.w	r3, r5, r3
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003372:	4629      	mov	r1, r5
 8003374:	028b      	lsls	r3, r1, #10
 8003376:	4621      	mov	r1, r4
 8003378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800337c:	4621      	mov	r1, r4
 800337e:	028a      	lsls	r2, r1, #10
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	61fa      	str	r2, [r7, #28]
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	f7fc ff52 	bl	8000238 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3750      	adds	r7, #80	@ 0x50
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200

080033d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000010 	.word	0x20000010

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f4:	f7ff fff0 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	08005a80 	.word	0x08005a80

08003418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800341c:	f7ff ffdc 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0b5b      	lsrs	r3, r3, #13
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4903      	ldr	r1, [pc, #12]	@ (800343c <HAL_RCC_GetPCLK2Freq+0x24>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	08005a80 	.word	0x08005a80

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003468:	4b69      	ldr	r3, [pc, #420]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a68      	ldr	r2, [pc, #416]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347c:	4964      	ldr	r1, [pc, #400]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d017      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	4959      	ldr	r1, [pc, #356]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d017      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	494a      	ldr	r1, [pc, #296]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 808b 	beq.w	800363a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b3a      	ldr	r3, [pc, #232]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	4a39      	ldr	r2, [pc, #228]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003530:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a34      	ldr	r2, [pc, #208]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fe faca 	bl	8001ae0 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003550:	f7fe fac6 	bl	8001ae0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e38f      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003562:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800356e:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d035      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	429a      	cmp	r2, r3
 800358a:	d02e      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003594:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035b4:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d114      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa8e 	bl	8001ae0 <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa8a 	bl	8001ae0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e351      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ee      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f6:	d111      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003606:	400b      	ands	r3, r1
 8003608:	4901      	ldr	r1, [pc, #4]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
 800360e:	e00b      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	0ffffcff 	.word	0x0ffffcff
 800361c:	4bac      	ldr	r3, [pc, #688]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4aab      	ldr	r2, [pc, #684]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003622:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003626:	6093      	str	r3, [r2, #8]
 8003628:	4ba9      	ldr	r3, [pc, #676]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	49a6      	ldr	r1, [pc, #664]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	4313      	orrs	r3, r2
 8003638:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003646:	4ba2      	ldr	r3, [pc, #648]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800364c:	4aa0      	ldr	r2, [pc, #640]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003652:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003656:	4b9e      	ldr	r3, [pc, #632]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003658:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	499b      	ldr	r1, [pc, #620]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003674:	4b96      	ldr	r3, [pc, #600]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003682:	4993      	ldr	r1, [pc, #588]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003696:	4b8e      	ldr	r3, [pc, #568]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a4:	498a      	ldr	r1, [pc, #552]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b8:	4b85      	ldr	r3, [pc, #532]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c6:	4982      	ldr	r1, [pc, #520]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036da:	4b7d      	ldr	r3, [pc, #500]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e8:	4979      	ldr	r1, [pc, #484]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036fc:	4b74      	ldr	r3, [pc, #464]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	4971      	ldr	r1, [pc, #452]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800371e:	4b6c      	ldr	r3, [pc, #432]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003724:	f023 020c 	bic.w	r2, r3, #12
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	4968      	ldr	r1, [pc, #416]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003740:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4960      	ldr	r1, [pc, #384]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003762:	4b5b      	ldr	r3, [pc, #364]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003768:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003770:	4957      	ldr	r1, [pc, #348]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003784:	4b52      	ldr	r3, [pc, #328]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	494f      	ldr	r1, [pc, #316]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	4946      	ldr	r1, [pc, #280]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037c8:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	493e      	ldr	r1, [pc, #248]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037ea:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f8:	4935      	ldr	r1, [pc, #212]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800380c:	4b30      	ldr	r3, [pc, #192]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800381a:	492d      	ldr	r1, [pc, #180]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800382e:	4b28      	ldr	r3, [pc, #160]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003834:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383c:	4924      	ldr	r1, [pc, #144]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800384e:	2301      	movs	r3, #1
 8003850:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387c:	4914      	ldr	r1, [pc, #80]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003890:	4b0f      	ldr	r3, [pc, #60]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a0:	490b      	ldr	r1, [pc, #44]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c4:	4902      	ldr	r1, [pc, #8]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038cc:	e002      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	4986      	ldr	r1, [pc, #536]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003904:	4b81      	ldr	r3, [pc, #516]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003914:	497d      	ldr	r1, [pc, #500]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d006      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80d6 	beq.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003930:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003936:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800393a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fe f8d0 	bl	8001ae0 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003944:	f7fe f8cc 	bl	8001ae0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e195      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003956:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d021      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003976:	4b65      	ldr	r3, [pc, #404]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003984:	4b61      	ldr	r3, [pc, #388]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398a:	0e1b      	lsrs	r3, r3, #24
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	019a      	lsls	r2, r3, #6
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	4958      	ldr	r1, [pc, #352]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039dc:	d129      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039de:	4b4b      	ldr	r3, [pc, #300]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039ec:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f2:	0f1b      	lsrs	r3, r3, #28
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	019a      	lsls	r2, r3, #6
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	071b      	lsls	r3, r3, #28
 8003a12:	493e      	ldr	r1, [pc, #248]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a20:	f023 021f 	bic.w	r2, r3, #31
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4938      	ldr	r1, [pc, #224]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01d      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a3e:	4b33      	ldr	r3, [pc, #204]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	0e1b      	lsrs	r3, r3, #24
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	431a      	orrs	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	4926      	ldr	r1, [pc, #152]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	019a      	lsls	r2, r3, #6
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	071b      	lsls	r3, r3, #28
 8003aa2:	491a      	ldr	r1, [pc, #104]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aaa:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fe f813 	bl	8001ae0 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003abe:	f7fe f80f 	bl	8001ae0 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	@ 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0d8      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	f040 80ce 	bne.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a08      	ldr	r2, [pc, #32]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af0:	f7fd fff6 	bl	8001ae0 <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003af6:	e00b      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003af8:	f7fd fff2 	bl	8001ae0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d904      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0bb      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b10:	4b5e      	ldr	r3, [pc, #376]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1c:	d0ec      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02e      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d12a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b46:	4b51      	ldr	r3, [pc, #324]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b54:	4b4d      	ldr	r3, [pc, #308]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	0f1b      	lsrs	r3, r3, #28
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	019a      	lsls	r2, r3, #6
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	071b      	lsls	r3, r3, #28
 8003b7a:	4944      	ldr	r1, [pc, #272]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b82:	4b42      	ldr	r3, [pc, #264]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	493d      	ldr	r1, [pc, #244]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d022      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bb0:	d11d      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb2:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	0e1b      	lsrs	r3, r3, #24
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bc0:	4b32      	ldr	r3, [pc, #200]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	019a      	lsls	r2, r3, #6
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	4929      	ldr	r1, [pc, #164]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d028      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bfa:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	0e1b      	lsrs	r3, r3, #24
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c08:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	019a      	lsls	r2, r3, #6
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	431a      	orrs	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	071b      	lsls	r3, r3, #28
 8003c2e:	4917      	ldr	r1, [pc, #92]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c36:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4911      	ldr	r1, [pc, #68]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0e      	ldr	r2, [pc, #56]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c58:	f7fd ff42 	bl	8001ae0 <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c60:	f7fd ff3e 	bl	8001ae0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	@ 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e007      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c7e:	d1ef      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800

08003c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e049      	b.n	8003d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd fcfe 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f000 fb1a 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e049      	b.n	8003de4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd fc87 	bl	8001678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 fac3 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x24>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e03c      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x3e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e02f      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x58>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e022      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d109      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x72>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e015      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e008      	b.n	8003e8a <HAL_TIM_PWM_Start+0x9e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e092      	b.n	8003fb8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xb6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea0:	e023      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xc6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb0:	e01b      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xd6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec0:	e013      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xe6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed0:	e00b      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0xf6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee0:	e003      	b.n	8003eea <HAL_TIM_PWM_Start+0xfe>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fd12 	bl	800491c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <HAL_TIM_PWM_Start+0x1d4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d004      	beq.n	8003f0c <HAL_TIM_PWM_Start+0x120>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc4 <HAL_TIM_PWM_Start+0x1d8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIM_PWM_Start+0x124>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_TIM_PWM_Start+0x126>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a25      	ldr	r2, [pc, #148]	@ (8003fc0 <HAL_TIM_PWM_Start+0x1d4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f38:	d01d      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_TIM_PWM_Start+0x1dc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_TIM_PWM_Start+0x1e0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <HAL_TIM_PWM_Start+0x1e4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <HAL_TIM_PWM_Start+0x1d8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <HAL_TIM_PWM_Start+0x1e8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x18a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a19      	ldr	r2, [pc, #100]	@ (8003fd8 <HAL_TIM_PWM_Start+0x1ec>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d115      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <HAL_TIM_PWM_Start+0x1f0>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	d015      	beq.n	8003fb4 <HAL_TIM_PWM_Start+0x1c8>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8e:	d011      	beq.n	8003fb4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	e008      	b.n	8003fb4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e000      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40001800 	.word	0x40001800
 8003fdc:	00010007 	.word	0x00010007

08003fe0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fc92 	bl	800491c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a36      	ldr	r2, [pc, #216]	@ (80040d8 <HAL_TIM_PWM_Stop+0xf8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_PWM_Stop+0x2c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a35      	ldr	r2, [pc, #212]	@ (80040dc <HAL_TIM_PWM_Stop+0xfc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_TIM_PWM_Stop+0x30>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_TIM_PWM_Stop+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d017      	beq.n	8004046 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_TIM_PWM_Stop+0x66>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1a      	ldr	r2, [r3, #32]
 800402c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <HAL_TIM_PWM_Stop+0x66>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_TIM_PWM_Stop+0x96>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <HAL_TIM_PWM_Stop+0x96>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Stop+0xa6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004084:	e023      	b.n	80040ce <HAL_TIM_PWM_Stop+0xee>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Stop+0xb6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	e01b      	b.n	80040ce <HAL_TIM_PWM_Stop+0xee>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Stop+0xc6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a4:	e013      	b.n	80040ce <HAL_TIM_PWM_Stop+0xee>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Stop+0xd6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040b4:	e00b      	b.n	80040ce <HAL_TIM_PWM_Stop+0xee>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Stop+0xe6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	e003      	b.n	80040ce <HAL_TIM_PWM_Stop+0xee>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0ff      	b.n	80042fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b14      	cmp	r3, #20
 800410a:	f200 80f0 	bhi.w	80042ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800410e:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004169 	.word	0x08004169
 8004118:	080042ef 	.word	0x080042ef
 800411c:	080042ef 	.word	0x080042ef
 8004120:	080042ef 	.word	0x080042ef
 8004124:	080041a9 	.word	0x080041a9
 8004128:	080042ef 	.word	0x080042ef
 800412c:	080042ef 	.word	0x080042ef
 8004130:	080042ef 	.word	0x080042ef
 8004134:	080041eb 	.word	0x080041eb
 8004138:	080042ef 	.word	0x080042ef
 800413c:	080042ef 	.word	0x080042ef
 8004140:	080042ef 	.word	0x080042ef
 8004144:	0800422b 	.word	0x0800422b
 8004148:	080042ef 	.word	0x080042ef
 800414c:	080042ef 	.word	0x080042ef
 8004150:	080042ef 	.word	0x080042ef
 8004154:	0800426d 	.word	0x0800426d
 8004158:	080042ef 	.word	0x080042ef
 800415c:	080042ef 	.word	0x080042ef
 8004160:	080042ef 	.word	0x080042ef
 8004164:	080042ad 	.word	0x080042ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f976 	bl	8004460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0204 	bic.w	r2, r2, #4
 8004192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6999      	ldr	r1, [r3, #24]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	619a      	str	r2, [r3, #24]
      break;
 80041a6:	e0a5      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f9c8 	bl	8004544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6999      	ldr	r1, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	619a      	str	r2, [r3, #24]
      break;
 80041e8:	e084      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa1f 	bl	8004634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0208 	orr.w	r2, r2, #8
 8004204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0204 	bic.w	r2, r2, #4
 8004214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	61da      	str	r2, [r3, #28]
      break;
 8004228:	e064      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa75 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	61da      	str	r2, [r3, #28]
      break;
 800426a:	e043      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 faac 	bl	80047d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042aa:	e023      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fade 	bl	8004874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042ec:	e002      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
      break;
 80042f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a46      	ldr	r2, [pc, #280]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004326:	d00f      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a42      	ldr	r2, [pc, #264]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a41      	ldr	r2, [pc, #260]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d027      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d023      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2e      	ldr	r2, [pc, #184]	@ (8004448 <TIM_Base_SetConfig+0x140>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <TIM_Base_SetConfig+0x144>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <TIM_Base_SetConfig+0x148>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <TIM_Base_SetConfig+0x14c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004458 <TIM_Base_SetConfig+0x150>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <TIM_Base_SetConfig+0x154>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]
  }
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40001800 	.word	0x40001800
 8004458:	40001c00 	.word	0x40001c00
 800445c:	40002000 	.word	0x40002000

08004460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0201 	bic.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <TIM_OC1_SetConfig+0xd8>)
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0302 	bic.w	r3, r3, #2
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a21      	ldr	r2, [pc, #132]	@ (800453c <TIM_OC1_SetConfig+0xdc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC1_SetConfig+0x64>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <TIM_OC1_SetConfig+0xe0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a16      	ldr	r2, [pc, #88]	@ (800453c <TIM_OC1_SetConfig+0xdc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d003      	beq.n	80044ee <TIM_OC1_SetConfig+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <TIM_OC1_SetConfig+0xe0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d111      	bne.n	8004512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	fffeff8f 	.word	0xfffeff8f
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400

08004544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0210 	bic.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4b2e      	ldr	r3, [pc, #184]	@ (8004628 <TIM_OC2_SetConfig+0xe4>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0320 	bic.w	r3, r3, #32
 800458e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a23      	ldr	r2, [pc, #140]	@ (800462c <TIM_OC2_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC2_SetConfig+0x68>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <TIM_OC2_SetConfig+0xec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a18      	ldr	r2, [pc, #96]	@ (800462c <TIM_OC2_SetConfig+0xe8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_OC2_SetConfig+0x94>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <TIM_OC2_SetConfig+0xec>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d113      	bne.n	8004600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	feff8fff 	.word	0xfeff8fff
 800462c:	40010000 	.word	0x40010000
 8004630:	40010400 	.word	0x40010400

08004634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4b2d      	ldr	r3, [pc, #180]	@ (8004714 <TIM_OC3_SetConfig+0xe0>)
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800467c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <TIM_OC3_SetConfig+0xe4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_OC3_SetConfig+0x66>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a21      	ldr	r2, [pc, #132]	@ (800471c <TIM_OC3_SetConfig+0xe8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10d      	bne.n	80046b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <TIM_OC3_SetConfig+0xe4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC3_SetConfig+0x92>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a16      	ldr	r2, [pc, #88]	@ (800471c <TIM_OC3_SetConfig+0xe8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	fffeff8f 	.word	0xfffeff8f
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <TIM_OC4_SetConfig+0xa4>)
 800474c:	4013      	ands	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <TIM_OC4_SetConfig+0xa8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_OC4_SetConfig+0x68>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <TIM_OC4_SetConfig+0xac>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800478e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	feff8fff 	.word	0xfeff8fff
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40010400 	.word	0x40010400

080047d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <TIM_OC5_SetConfig+0x98>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a12      	ldr	r2, [pc, #72]	@ (800486c <TIM_OC5_SetConfig+0x9c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC5_SetConfig+0x5e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a11      	ldr	r2, [pc, #68]	@ (8004870 <TIM_OC5_SetConfig+0xa0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d109      	bne.n	8004842 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	fffeff8f 	.word	0xfffeff8f
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400

08004874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4b1c      	ldr	r3, [pc, #112]	@ (8004910 <TIM_OC6_SetConfig+0x9c>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	051b      	lsls	r3, r3, #20
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <TIM_OC6_SetConfig+0xa0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_OC6_SetConfig+0x60>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <TIM_OC6_SetConfig+0xa4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d109      	bne.n	80048e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	621a      	str	r2, [r3, #32]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	feff8fff 	.word	0xfeff8fff
 8004914:	40010000 	.word	0x40010000
 8004918:	40010400 	.word	0x40010400

0800491c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e06d      	b.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a20      	ldr	r2, [pc, #128]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f2:	d01d      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10c      	bne.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40001800 	.word	0x40001800

08004a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e040      	b.n	8004b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fe84 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa8c 	bl	8004fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f825 	bl	8004b20 <UART_SetConfig>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01b      	b.n	8004b18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb0b 	bl	800512c <UART_CheckIdleState>
 8004b16:	4603      	mov	r3, r0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8004de4 <UART_SetConfig+0x2c4>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a94      	ldr	r2, [pc, #592]	@ (8004de8 <UART_SetConfig+0x2c8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0xbe>
 8004b9c:	4b93      	ldr	r3, [pc, #588]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d816      	bhi.n	8004bd8 <UART_SetConfig+0xb8>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0x90>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bc7 	.word	0x08004bc7
 8004bbc:	08004bd3 	.word	0x08004bd3
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e150      	b.n	8004e68 <UART_SetConfig+0x348>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e14d      	b.n	8004e68 <UART_SetConfig+0x348>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e14a      	b.n	8004e68 <UART_SetConfig+0x348>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e147      	b.n	8004e68 <UART_SetConfig+0x348>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e144      	b.n	8004e68 <UART_SetConfig+0x348>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a83      	ldr	r2, [pc, #524]	@ (8004df0 <UART_SetConfig+0x2d0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d132      	bne.n	8004c4e <UART_SetConfig+0x12e>
 8004be8:	4b80      	ldr	r3, [pc, #512]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d828      	bhi.n	8004c48 <UART_SetConfig+0x128>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0xdc>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c49 	.word	0x08004c49
 8004c04:	08004c49 	.word	0x08004c49
 8004c08:	08004c49 	.word	0x08004c49
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c49 	.word	0x08004c49
 8004c14:	08004c49 	.word	0x08004c49
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c37 	.word	0x08004c37
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c49 	.word	0x08004c49
 8004c28:	08004c49 	.word	0x08004c49
 8004c2c:	08004c43 	.word	0x08004c43
 8004c30:	2300      	movs	r3, #0
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e118      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c36:	2302      	movs	r3, #2
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e115      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e112      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c42:	2308      	movs	r3, #8
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e10f      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e10c      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a68      	ldr	r2, [pc, #416]	@ (8004df4 <UART_SetConfig+0x2d4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <UART_SetConfig+0x17a>
 8004c58:	4b64      	ldr	r3, [pc, #400]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c62:	2b30      	cmp	r3, #48	@ 0x30
 8004c64:	d013      	beq.n	8004c8e <UART_SetConfig+0x16e>
 8004c66:	2b30      	cmp	r3, #48	@ 0x30
 8004c68:	d814      	bhi.n	8004c94 <UART_SetConfig+0x174>
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d009      	beq.n	8004c82 <UART_SetConfig+0x162>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d810      	bhi.n	8004c94 <UART_SetConfig+0x174>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x15c>
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d006      	beq.n	8004c88 <UART_SetConfig+0x168>
 8004c7a:	e00b      	b.n	8004c94 <UART_SetConfig+0x174>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e0f2      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e0ef      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e0ec      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e0e9      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e0e6      	b.n	8004e68 <UART_SetConfig+0x348>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a56      	ldr	r2, [pc, #344]	@ (8004df8 <UART_SetConfig+0x2d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d120      	bne.n	8004ce6 <UART_SetConfig+0x1c6>
 8004ca4:	4b51      	ldr	r3, [pc, #324]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb0:	d013      	beq.n	8004cda <UART_SetConfig+0x1ba>
 8004cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cb4:	d814      	bhi.n	8004ce0 <UART_SetConfig+0x1c0>
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d009      	beq.n	8004cce <UART_SetConfig+0x1ae>
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d810      	bhi.n	8004ce0 <UART_SetConfig+0x1c0>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <UART_SetConfig+0x1a8>
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d006      	beq.n	8004cd4 <UART_SetConfig+0x1b4>
 8004cc6:	e00b      	b.n	8004ce0 <UART_SetConfig+0x1c0>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e0cc      	b.n	8004e68 <UART_SetConfig+0x348>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e0c9      	b.n	8004e68 <UART_SetConfig+0x348>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0c6      	b.n	8004e68 <UART_SetConfig+0x348>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e0c3      	b.n	8004e68 <UART_SetConfig+0x348>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0c0      	b.n	8004e68 <UART_SetConfig+0x348>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a44      	ldr	r2, [pc, #272]	@ (8004dfc <UART_SetConfig+0x2dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d125      	bne.n	8004d3c <UART_SetConfig+0x21c>
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfe:	d017      	beq.n	8004d30 <UART_SetConfig+0x210>
 8004d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d04:	d817      	bhi.n	8004d36 <UART_SetConfig+0x216>
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d0a:	d00b      	beq.n	8004d24 <UART_SetConfig+0x204>
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d811      	bhi.n	8004d36 <UART_SetConfig+0x216>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <UART_SetConfig+0x1fe>
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1a:	d006      	beq.n	8004d2a <UART_SetConfig+0x20a>
 8004d1c:	e00b      	b.n	8004d36 <UART_SetConfig+0x216>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e0a1      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d24:	2302      	movs	r3, #2
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e09e      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e09b      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d30:	2308      	movs	r3, #8
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e098      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d36:	2310      	movs	r3, #16
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e095      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	@ (8004e00 <UART_SetConfig+0x2e0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d125      	bne.n	8004d92 <UART_SetConfig+0x272>
 8004d46:	4b29      	ldr	r3, [pc, #164]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d54:	d017      	beq.n	8004d86 <UART_SetConfig+0x266>
 8004d56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d5a:	d817      	bhi.n	8004d8c <UART_SetConfig+0x26c>
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d60:	d00b      	beq.n	8004d7a <UART_SetConfig+0x25a>
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d66:	d811      	bhi.n	8004d8c <UART_SetConfig+0x26c>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <UART_SetConfig+0x254>
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d70:	d006      	beq.n	8004d80 <UART_SetConfig+0x260>
 8004d72:	e00b      	b.n	8004d8c <UART_SetConfig+0x26c>
 8004d74:	2301      	movs	r3, #1
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e076      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e073      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d80:	2304      	movs	r3, #4
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e070      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d86:	2308      	movs	r3, #8
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e06d      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e06a      	b.n	8004e68 <UART_SetConfig+0x348>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	@ (8004e04 <UART_SetConfig+0x2e4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d138      	bne.n	8004e0e <UART_SetConfig+0x2ee>
 8004d9c:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <UART_SetConfig+0x2cc>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004da6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004daa:	d017      	beq.n	8004ddc <UART_SetConfig+0x2bc>
 8004dac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004db0:	d82a      	bhi.n	8004e08 <UART_SetConfig+0x2e8>
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db6:	d00b      	beq.n	8004dd0 <UART_SetConfig+0x2b0>
 8004db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dbc:	d824      	bhi.n	8004e08 <UART_SetConfig+0x2e8>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <UART_SetConfig+0x2aa>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc6:	d006      	beq.n	8004dd6 <UART_SetConfig+0x2b6>
 8004dc8:	e01e      	b.n	8004e08 <UART_SetConfig+0x2e8>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	77fb      	strb	r3, [r7, #31]
 8004dce:	e04b      	b.n	8004e68 <UART_SetConfig+0x348>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e048      	b.n	8004e68 <UART_SetConfig+0x348>
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e045      	b.n	8004e68 <UART_SetConfig+0x348>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e042      	b.n	8004e68 <UART_SetConfig+0x348>
 8004de2:	bf00      	nop
 8004de4:	efff69f3 	.word	0xefff69f3
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40004400 	.word	0x40004400
 8004df4:	40004800 	.word	0x40004800
 8004df8:	40004c00 	.word	0x40004c00
 8004dfc:	40005000 	.word	0x40005000
 8004e00:	40011400 	.word	0x40011400
 8004e04:	40007800 	.word	0x40007800
 8004e08:	2310      	movs	r3, #16
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e02c      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a72      	ldr	r2, [pc, #456]	@ (8004fdc <UART_SetConfig+0x4bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d125      	bne.n	8004e64 <UART_SetConfig+0x344>
 8004e18:	4b71      	ldr	r3, [pc, #452]	@ (8004fe0 <UART_SetConfig+0x4c0>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e26:	d017      	beq.n	8004e58 <UART_SetConfig+0x338>
 8004e28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e2c:	d817      	bhi.n	8004e5e <UART_SetConfig+0x33e>
 8004e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e32:	d00b      	beq.n	8004e4c <UART_SetConfig+0x32c>
 8004e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e38:	d811      	bhi.n	8004e5e <UART_SetConfig+0x33e>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <UART_SetConfig+0x326>
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e42:	d006      	beq.n	8004e52 <UART_SetConfig+0x332>
 8004e44:	e00b      	b.n	8004e5e <UART_SetConfig+0x33e>
 8004e46:	2300      	movs	r3, #0
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e00d      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e00a      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e52:	2304      	movs	r3, #4
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e007      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e004      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e001      	b.n	8004e68 <UART_SetConfig+0x348>
 8004e64:	2310      	movs	r3, #16
 8004e66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e70:	d15b      	bne.n	8004f2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e72:	7ffb      	ldrb	r3, [r7, #31]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d828      	bhi.n	8004eca <UART_SetConfig+0x3aa>
 8004e78:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0x360>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe faa4 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	61b8      	str	r0, [r7, #24]
        break;
 8004eaa:	e013      	b.n	8004ed4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eac:	f7fe fab4 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	61b8      	str	r0, [r7, #24]
        break;
 8004eb2:	e00f      	b.n	8004ed4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe4 <UART_SetConfig+0x4c4>)
 8004eb6:	61bb      	str	r3, [r7, #24]
        break;
 8004eb8:	e00c      	b.n	8004ed4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fe f987 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004ebe:	61b8      	str	r0, [r7, #24]
        break;
 8004ec0:	e008      	b.n	8004ed4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec6:	61bb      	str	r3, [r7, #24]
        break;
 8004ec8:	e004      	b.n	8004ed4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ed2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d074      	beq.n	8004fc4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	005a      	lsls	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	441a      	add	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d916      	bls.n	8004f24 <UART_SetConfig+0x404>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d212      	bcs.n	8004f24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f023 030f 	bic.w	r3, r3, #15
 8004f06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	89fa      	ldrh	r2, [r7, #14]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	e04f      	b.n	8004fc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	77bb      	strb	r3, [r7, #30]
 8004f28:	e04c      	b.n	8004fc4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d828      	bhi.n	8004f82 <UART_SetConfig+0x462>
 8004f30:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <UART_SetConfig+0x418>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f83 	.word	0x08004f83
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fe fa48 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004f60:	61b8      	str	r0, [r7, #24]
        break;
 8004f62:	e013      	b.n	8004f8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7fe fa58 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe4 <UART_SetConfig+0x4c4>)
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	e00c      	b.n	8004f8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fe f92b 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004f76:	61b8      	str	r0, [r7, #24]
        break;
 8004f78:	e008      	b.n	8004f8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f7e:	61bb      	str	r3, [r7, #24]
        break;
 8004f80:	e004      	b.n	8004f8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	77bb      	strb	r3, [r7, #30]
        break;
 8004f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	085a      	lsrs	r2, r3, #1
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b0f      	cmp	r3, #15
 8004faa:	d909      	bls.n	8004fc0 <UART_SetConfig+0x4a0>
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb2:	d205      	bcs.n	8004fc0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e001      	b.n	8004fc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40007c00 	.word	0x40007c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	00f42400 	.word	0x00f42400

08004fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01a      	beq.n	80050fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e6:	d10a      	bne.n	80050fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b098      	sub	sp, #96	@ 0x60
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800513c:	f7fc fcd0 	bl	8001ae0 <HAL_GetTick>
 8005140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d12e      	bne.n	80051ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f88c 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005188:	647b      	str	r3, [r7, #68]	@ 0x44
 800518a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e6      	bne.n	800516a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e062      	b.n	8005274 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d149      	bne.n	8005250 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c4:	2200      	movs	r2, #0
 80051c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f856 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03c      	beq.n	8005250 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	623b      	str	r3, [r7, #32]
   return(result);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60fb      	str	r3, [r7, #12]
   return(result);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e011      	b.n	8005274 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3758      	adds	r7, #88	@ 0x58
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528c:	e04f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d04b      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005296:	f7fc fc23 	bl	8001ae0 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <UART_WaitOnFlagUntilTimeout+0x30>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e04e      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d037      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d034      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d031      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d110      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f838 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e029      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005308:	d111      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f81e 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0a0      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b095      	sub	sp, #84	@ 0x54
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	643b      	str	r3, [r7, #64]	@ 0x40
 800537e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d118      	bne.n	80053fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005412:	bf00      	nop
 8005414:	3754      	adds	r7, #84	@ 0x54
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005420:	b084      	sub	sp, #16
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	f107 001c 	add.w	r0, r7, #28
 800542e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005432:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005436:	2b01      	cmp	r3, #1
 8005438:	d121      	bne.n	800547e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b21      	ldr	r3, [pc, #132]	@ (80054d0 <USB_CoreInit+0xb0>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800545e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005462:	2b01      	cmp	r3, #1
 8005464:	d105      	bne.n	8005472 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa92 	bl	800599c <USB_CoreReset>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e010      	b.n	80054a0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa86 	bl	800599c <USB_CoreReset>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80054a0:	7fbb      	ldrb	r3, [r7, #30]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10b      	bne.n	80054be <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f043 0206 	orr.w	r2, r3, #6
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ca:	b004      	add	sp, #16
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	ffbdffbf 	.word	0xffbdffbf

080054d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f023 0201 	bic.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d115      	bne.n	8005544 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005524:	200a      	movs	r0, #10
 8005526:	f7fc fae7 	bl	8001af8 <HAL_Delay>
      ms += 10U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	330a      	adds	r3, #10
 800552e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fa25 	bl	8005980 <USB_GetMode>
 8005536:	4603      	mov	r3, r0
 8005538:	2b01      	cmp	r3, #1
 800553a:	d01e      	beq.n	800557a <USB_SetCurrentMode+0x84>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005540:	d9f0      	bls.n	8005524 <USB_SetCurrentMode+0x2e>
 8005542:	e01a      	b.n	800557a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005556:	200a      	movs	r0, #10
 8005558:	f7fc face 	bl	8001af8 <HAL_Delay>
      ms += 10U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	330a      	adds	r3, #10
 8005560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa0c 	bl	8005980 <USB_GetMode>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <USB_SetCurrentMode+0x84>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2bc7      	cmp	r3, #199	@ 0xc7
 8005572:	d9f0      	bls.n	8005556 <USB_SetCurrentMode+0x60>
 8005574:	e001      	b.n	800557a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e005      	b.n	8005586 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2bc8      	cmp	r3, #200	@ 0xc8
 800557e:	d101      	bne.n	8005584 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005590:	b084      	sub	sp, #16
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800559e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	e009      	b.n	80055c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3340      	adds	r3, #64	@ 0x40
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	3301      	adds	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0e      	cmp	r3, #14
 80055c8:	d9f2      	bls.n	80055b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11c      	bne.n	800560c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e005      	b.n	8005618 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005624:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10d      	bne.n	8005648 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005630:	2b00      	cmp	r3, #0
 8005632:	d104      	bne.n	800563e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005634:	2100      	movs	r1, #0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f968 	bl	800590c <USB_SetDevSpeed>
 800563c:	e008      	b.n	8005650 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800563e:	2101      	movs	r1, #1
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f963 	bl	800590c <USB_SetDevSpeed>
 8005646:	e003      	b.n	8005650 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005648:	2103      	movs	r1, #3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f95e 	bl	800590c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005650:	2110      	movs	r1, #16
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8fa 	bl	800584c <USB_FlushTxFifo>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f924 	bl	80058b0 <USB_FlushRxFifo>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005678:	461a      	mov	r2, r3
 800567a:	2300      	movs	r3, #0
 800567c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005684:	461a      	mov	r2, r3
 8005686:	2300      	movs	r3, #0
 8005688:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e043      	b.n	8005724 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b2:	d118      	bne.n	80056e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c6:	461a      	mov	r2, r3
 80056c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e013      	b.n	80056f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056dc:	461a      	mov	r2, r3
 80056de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e008      	b.n	80056f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	461a      	mov	r2, r3
 8005706:	2300      	movs	r3, #0
 8005708:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	461a      	mov	r2, r3
 8005718:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800571c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3301      	adds	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005728:	461a      	mov	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4293      	cmp	r3, r2
 800572e:	d3b5      	bcc.n	800569c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e043      	b.n	80057be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574c:	d118      	bne.n	8005780 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e013      	b.n	8005792 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e008      	b.n	8005792 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057c2:	461a      	mov	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d3b5      	bcc.n	8005736 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <USB_DevInit+0x2b4>)
 8005806:	4313      	orrs	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800580c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f043 0208 	orr.w	r2, r3, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005820:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005824:	2b01      	cmp	r3, #1
 8005826:	d105      	bne.n	8005834 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <USB_DevInit+0x2b8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005840:	b004      	add	sp, #16
 8005842:	4770      	bx	lr
 8005844:	803c3800 	.word	0x803c3800
 8005848:	40000004 	.word	0x40000004

0800584c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005866:	d901      	bls.n	800586c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e01b      	b.n	80058a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	daf2      	bge.n	800585a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	019b      	lsls	r3, r3, #6
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005890:	d901      	bls.n	8005896 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d0f0      	beq.n	8005884 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c8:	d901      	bls.n	80058ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e018      	b.n	8005900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	daf2      	bge.n	80058bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2210      	movs	r2, #16
 80058de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ec:	d901      	bls.n	80058f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e006      	b.n	8005900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d0f0      	beq.n	80058e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005958:	f023 0303 	bic.w	r3, r3, #3
 800595c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0301 	and.w	r3, r3, #1
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059b4:	d901      	bls.n	80059ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e01b      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	daf2      	bge.n	80059a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059de:	d901      	bls.n	80059e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e006      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d0f0      	beq.n	80059d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <memset>:
 80059fe:	4402      	add	r2, r0
 8005a00:	4603      	mov	r3, r0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d100      	bne.n	8005a08 <memset+0xa>
 8005a06:	4770      	bx	lr
 8005a08:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0c:	e7f9      	b.n	8005a02 <memset+0x4>
	...

08005a10 <__libc_init_array>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4d0d      	ldr	r5, [pc, #52]	@ (8005a48 <__libc_init_array+0x38>)
 8005a14:	4c0d      	ldr	r4, [pc, #52]	@ (8005a4c <__libc_init_array+0x3c>)
 8005a16:	1b64      	subs	r4, r4, r5
 8005a18:	10a4      	asrs	r4, r4, #2
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	42a6      	cmp	r6, r4
 8005a1e:	d109      	bne.n	8005a34 <__libc_init_array+0x24>
 8005a20:	4d0b      	ldr	r5, [pc, #44]	@ (8005a50 <__libc_init_array+0x40>)
 8005a22:	4c0c      	ldr	r4, [pc, #48]	@ (8005a54 <__libc_init_array+0x44>)
 8005a24:	f000 f818 	bl	8005a58 <_init>
 8005a28:	1b64      	subs	r4, r4, r5
 8005a2a:	10a4      	asrs	r4, r4, #2
 8005a2c:	2600      	movs	r6, #0
 8005a2e:	42a6      	cmp	r6, r4
 8005a30:	d105      	bne.n	8005a3e <__libc_init_array+0x2e>
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a38:	4798      	blx	r3
 8005a3a:	3601      	adds	r6, #1
 8005a3c:	e7ee      	b.n	8005a1c <__libc_init_array+0xc>
 8005a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a42:	4798      	blx	r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	e7f2      	b.n	8005a2e <__libc_init_array+0x1e>
 8005a48:	08005a90 	.word	0x08005a90
 8005a4c:	08005a90 	.word	0x08005a90
 8005a50:	08005a90 	.word	0x08005a90
 8005a54:	08005a94 	.word	0x08005a94

08005a58 <_init>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr

08005a64 <_fini>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr
